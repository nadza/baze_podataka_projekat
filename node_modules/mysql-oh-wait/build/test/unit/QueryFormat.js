"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var saylo_1 = require("saylo");
var QueryFormat_1 = __importDefault(require("../../src/QueryFormat"));
var fakeEscape = { escape: function (v) { return "'".concat(v, "'"); }, };
describe("QueryFormat", function () {
    saylo_1.logger.turnOn('debug');
    describe("QueryFormat.constructor(connection)", function () {
        it('should be able to get a QueryFormat instance', function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat).to.be.an.instanceof(QueryFormat_1.default);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':ph1, :ph2', { ph1: 'a', ph2: 'b' })", function () {
        var expected = "'a', 'b'";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':ph1, :ph2', { ph1: 'a', ph2: 'b' })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat('(:ph1, :ph2)', { ph1: 'a', ph2: 'b' })", function () {
        var expected = "('a', 'b')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat('(:ph1, :ph2)', { ph1: 'a', ph2: 'b' })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':?, :?', [ 'a', 'b' ])", function () {
        var expected = "'a', 'b'";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':?, :?', ['a', 'b'])).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat('(:?, :?)', [ 'a', 'b' ])", function () {
        var expected = "('a', 'b')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat('(:?, :?)', ['a', 'b'])).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':ph1', { ph1: ['a', 'b'] })", function () {
        var expected = "('a', 'b')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':ph1', { ph1: ['a', 'b'] })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':ph1, :ph2', { ph1: ['a', 'b'], ph2: ['c', 'd'] })", function () {
        var expected = "('a', 'b'), ('c', 'd')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':ph1, :ph2', { ph1: ['a', 'b'], ph2: ['c', 'd'] })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':?', [ ['a', 'b'] ])", function () {
        var expected = "('a', 'b')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':?', [['a', 'b']])).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    // Needs special case that knows it needs to pass the full values array instead of popping when single qmark in query
    describe("QueryFormat.queryFormat(':?', [ ['a', 'b'], ['c', 'd'] ])", function () {
        var expected = "('a', 'b'), ('c', 'd')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':?', [['a', 'b'], ['c', 'd']])).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    // Needs special case that knows it needs to pass the full values array instead of popping when single qmark in query
    describe("QueryFormat.queryFormat(':?, :?', [ ['a', 'b'], ['c', 'd'] ])", function () {
        var expected = "('a', 'b'), ('c', 'd')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':?, :?', [['a', 'b'], ['c', 'd']])).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':ph1', { ph1: [ ['a', 'b'], ['c', 'd'] ] })", function () {
        var expected = "('a', 'b'), ('c', 'd')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':ph1', { ph1: [['a', 'b'], ['c', 'd']] })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':?', { ph1: 'a', ph2: 'b'})", function () {
        var expected = "ph1 = 'a' AND ph2 = 'b'";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':?', { ph1: 'a', ph2: 'b' })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':?', { ph1: null, ph2: 'b'})", function () {
        var expected = "ph1 IS NULL AND ph2 = 'b'";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':?', { ph1: null, ph2: 'b' })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':ph1 and :ph2', { ph1: ['a', 'b'], ph2: 'c' } })", function () {
        var expected = "('a', 'b') AND 'c'";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':ph1 AND :ph2', { ph1: ['a', 'b'], ph2: 'c' })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':ph1 and :ph2', { ph1: [null, 'b'], ph2: 'c' })", function () {
        var expected = "(NULL, 'b') AND 'c'";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    (0, chai_1.expect)(queryFormat.queryFormat(':ph1 AND :ph2', { ph1: [null, 'b'], ph2: 'c' })).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.toMysqlDatetime(date)", function () {
        var date1 = new Date(Date.parse('2020-03-01T09:40:16.767Z'));
        var expected = '2020-03-01 09:40:16';
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    (0, chai_1.expect)(QueryFormat_1.default.toMysqlDatetime(date1)).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':?', [['a', 'b', false, new Date()]['c', 'd', 1, new Date()]])", function () {
        var date1 = new Date(Date.parse('2020-03-01T09:40:16.767Z'));
        var date2 = new Date(Date.parse('2020-04-01T09:40:16.767Z'));
        var expected = "('a', 'b', '0', '".concat(QueryFormat_1.default.toMysqlDatetime(date1), "'), ('c', 'd', '1', '").concat(QueryFormat_1.default.toMysqlDatetime(date2), "')");
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat, vals;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    vals = [['a', 'b', false, date1], ['c', 'd', 1, date2]];
                    (0, chai_1.expect)(queryFormat.queryFormat(':?', vals)).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("QueryFormat.queryFormat(':?', [['a', 'b', null, 4]['c', 'd', 'e', 33]])", function () {
        var expected = "('a', 'b', NULL, '4'), ('c', 'd', 'e', '33')";
        it("should return ".concat(expected), function () {
            return __awaiter(this, void 0, void 0, function () {
                var queryFormat, vals;
                return __generator(this, function (_a) {
                    queryFormat = new QueryFormat_1.default(fakeEscape);
                    vals = [['a', 'b', null, 4], ['c', 'd', 'e', 33]];
                    (0, chai_1.expect)(queryFormat.queryFormat(':?', vals)).to.be.equal(expected);
                    return [2 /*return*/];
                });
            });
        });
    });
});
