"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mysql_1 = __importDefault(require("mysql"));
var saylo_1 = require("saylo");
var v4_1 = __importDefault(require("uuid/v4"));
var MysqlReq_1 = __importDefault(require("../../src/MysqlReq"));
describe("MysqlReq", function () {
    saylo_1.logger.turnOn('debug');
    saylo_1.logger.turnOff('debug');
    describe("MysqlReq.constructor({adapter, logger, connectionConfig})", function () {
        it('should be able to get an ActionResult', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req, actionResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = __assign(__assign({}, MysqlReq_1.default.extractConfigFromEnv(process.env)), { multipleStatements: false });
                            req = new MysqlReq_1.default({
                                adapter: mysql_1.default,
                                connectionConfig: config
                            });
                            return [4 /*yield*/, req.connect()];
                        case 1:
                            actionResult = _a.sent();
                            (0, chai_1.expect)(typeof actionResult === 'object').to.be.true;
                            (0, chai_1.expect)(typeof actionResult.info !== undefined).to.be.true;
                            return [4 /*yield*/, req.removeConnection()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to connect with adapter and connectionConfig params', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req, actionResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                            req = new MysqlReq_1.default({
                                adapter: mysql_1.default,
                                connectionConfig: config
                            });
                            return [4 /*yield*/, req.connect()];
                        case 1:
                            actionResult = _a.sent();
                            (0, chai_1.expect)(actionResult.value).to.be.a('number');
                            return [4 /*yield*/, req.removeConnection()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should make ActionResult have an error property on wrong connection credentials confg', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req, actionResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = {
                                multipleStatements: false,
                                database: 'wrongone',
                                host: 'wrongone',
                                user: 'wrongone',
                                password: 'wrongone',
                            };
                            req = new MysqlReq_1.default({
                                adapter: mysql_1.default,
                                connectionConfig: config
                            });
                            return [4 /*yield*/, req.connect()];
                        case 1:
                            actionResult = _a.sent();
                            (0, chai_1.expect)(actionResult.error).to.not.be.equal(null);
                            return [4 /*yield*/, req.removeConnection()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should throw an error property on missing host connection confg construction', function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, user, password, config, shouldThrow;
                return __generator(this, function (_b) {
                    _a = MysqlReq_1.default.extractConfigFromEnv(process.env), user = _a.user, password = _a.password;
                    config = {
                        multipleStatements: false,
                        user: user,
                        password: password
                    };
                    shouldThrow = function () {
                        new MysqlReq_1.default({
                            adapter: mysql_1.default,
                            connectionConfig: config
                        });
                    };
                    (0, chai_1.expect)(shouldThrow).to.throw();
                    return [2 /*return*/];
                });
            });
        });
        it('should be able to set connectionConfig from constructor param', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                            req = new MysqlReq_1.default({
                                adapter: mysql_1.default,
                                logger: saylo_1.logger,
                                connectionConfig: config
                            });
                            (0, chai_1.expect)(req.getConnectionConfig()).to.be.deep.equal(config);
                            return [4 /*yield*/, req.removeConnection()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to set adapter from constructor param', function () {
            return __awaiter(this, void 0, void 0, function () {
                var req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            req = new MysqlReq_1.default({
                                adapter: mysql_1.default,
                            });
                            (0, chai_1.expect)(req.getAdapter()).to.be.equal(mysql_1.default);
                            return [4 /*yield*/, req.removeConnection()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to set logger from constructor param', function () {
            return __awaiter(this, void 0, void 0, function () {
                var req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            req = new MysqlReq_1.default({
                                logger: saylo_1.logger,
                            });
                            (0, chai_1.expect)(req.getLogger()).to.be.equal(saylo_1.logger);
                            return [4 /*yield*/, req.removeConnection()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to connect without params if setAdapter() and setConnectionConfig() are called before', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req, actionResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                            req = new MysqlReq_1.default();
                            req.setAdapter(mysql_1.default);
                            req.setConnectionConfig(config);
                            return [4 /*yield*/, req.connect()];
                        case 1:
                            actionResult = _a.sent();
                            (0, chai_1.expect)(actionResult.value).to.be.a('number');
                            return [4 /*yield*/, req.removeConnection()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should not be connected on instantiation', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                            req = new MysqlReq_1.default();
                            req.setAdapter(mysql_1.default);
                            req.setConnectionConfig(config);
                            _a = chai_1.expect;
                            return [4 /*yield*/, req.isConnected()];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).to.be.equal(false);
                            return [4 /*yield*/, req.removeConnection()];
                        case 2:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe("MysqlReq.extractConfigFromEnv()", function () {
        it('should be able to load connection config from env variables and return it', function () {
            return __awaiter(this, void 0, void 0, function () {
                var env;
                return __generator(this, function (_a) {
                    env = {
                        DB_HOST: 'localhost',
                        DB_USER: 'user',
                        DB_PASSWORD: 'password',
                        DB_NAME: 'test_db',
                        DB_CHARSET: 'utf8mb4',
                        DB_COLLATION: 'utf8mb4_general_ci',
                        MULTIPLE_STATEMENTS: 'true',
                    };
                    (0, chai_1.expect)(MysqlReq_1.default.extractConfigFromEnv(env)).to.deep.equal({
                        host: 'localhost',
                        user: 'user',
                        password: 'password',
                        database: 'test_db',
                        charset: 'utf8mb4',
                        collation: 'utf8mb4_general_ci',
                        multipleStatements: true,
                    });
                    return [2 /*return*/];
                });
            });
        });
        it('should be able to load multipleStatements "0" config from env and get proper boolean value', function () {
            return __awaiter(this, void 0, void 0, function () {
                var env;
                return __generator(this, function (_a) {
                    env = {
                        MULTIPLE_STATEMENTS: '0',
                    };
                    (0, chai_1.expect)(MysqlReq_1.default.extractConfigFromEnv(env)).to.deep.equal({
                        multipleStatements: false,
                    });
                    return [2 /*return*/];
                });
            });
        });
        it('should be able to load multipleStatements "false" config from env and get proper boolean value', function () {
            return __awaiter(this, void 0, void 0, function () {
                var env;
                return __generator(this, function (_a) {
                    env = {
                        MULTIPLE_STATEMENTS: 'false',
                    };
                    (0, chai_1.expect)(MysqlReq_1.default.extractConfigFromEnv(env)).to.deep.equal({
                        multipleStatements: false,
                    });
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("MysqlReq.setConnectionConfig()", function () {
        it('should be able to set connection config and return it', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                            req = new MysqlReq_1.default();
                            (0, chai_1.expect)(req.setConnectionConfig(config)).to.deep.equal(config);
                            return [4 /*yield*/, req.removeConnection()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe("MysqlReq.getConnectionConfig()", function () {
        it('should return connection config created with setConnectionConfig()', function () {
            return __awaiter(this, void 0, void 0, function () {
                var config, req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                            req = new MysqlReq_1.default();
                            req.setConnectionConfig(config);
                            (0, chai_1.expect)(req.getConnectionConfig()).to.deep.equal(config);
                            return [4 /*yield*/, req.removeConnection()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe("MysqlReq.removeConnection()", function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                it('should make MysqlReq.hasConnection() return false', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should make MysqlReq.hasConnection() return false even if connection was set priorly', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.connect()];
                                case 1:
                                    actionResult = _a.sent();
                                    (0, chai_1.expect)(actionResult.value).to.be.a('number');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 2:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should return false if there was no connection', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _b.sent();
                                    _a = chai_1.expect;
                                    return [4 /*yield*/, req.removeConnection()];
                                case 2:
                                    _a.apply(void 0, [_b.sent()]).to.be.equal(false);
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should return true if there was a connection', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _b.sent();
                                    return [4 /*yield*/, req.createConnection()];
                                case 2:
                                    _b.sent();
                                    _a = chai_1.expect;
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _a.apply(void 0, [_b.sent()]).to.be.equal(true);
                                    return [4 /*yield*/, req.removeConnection()];
                                case 4:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                return [2 /*return*/];
            });
        });
    });
    describe("req.hasConnection()", function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                it('should return true if createConnection() is called before', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.hasConnection()];
                                case 1:
                                    _a = (_b.sent());
                                    if (!_a) return [3 /*break*/, 3];
                                    return [4 /*yield*/, req.removeConnection()];
                                case 2:
                                    _a = (_b.sent());
                                    _b.label = 3;
                                case 3:
                                    _a;
                                    return [4 /*yield*/, req.createConnection()];
                                case 4:
                                    _b.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(true);
                                    return [4 /*yield*/, req.removeConnection()];
                                case 5:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should return false if removeConnection() is called before', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [4 /*yield*/, req.removeConnection()];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                return [2 /*return*/];
            });
        });
    });
    describe("req.connect()", function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                it('should not reconnect if connectionConfig has not changed', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult, actionResult2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, req.connect()];
                                case 2:
                                    actionResult = _a.sent();
                                    (0, chai_1.expect)(actionResult.value).to.be.a('number');
                                    return [4 /*yield*/, req.connect()];
                                case 3:
                                    actionResult2 = _a.sent();
                                    (0, chai_1.expect)(actionResult2.value).to.be.a('number');
                                    (0, chai_1.expect)(actionResult.value).to.be.equal(actionResult2.value);
                                    return [4 /*yield*/, req.removeConnection()];
                                case 4:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should not allow reseting connectionConfig if hasConnection', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, config2, req, actionResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    config2 = __assign({ multipleStatements: true }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.connect()];
                                case 1:
                                    actionResult = _a.sent();
                                    (0, chai_1.expect)(actionResult.value).to.be.a('number');
                                    (0, chai_1.expect)(function () { return req.setConnectionConfig(config2); }).to.throw();
                                    return [4 /*yield*/, req.removeConnection()];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                return [2 /*return*/];
            });
        });
    });
    describe("req.query()", function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                it('should return an array on select even if not connected priorly', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [4 /*yield*/, req.query({ sql: 'SHOW TABLES' })];
                                case 2:
                                    actionResult = _a.sent();
                                    (0, chai_1.expect)(actionResult.value).to.be.an('array');
                                    (0, chai_1.expect)(typeof actionResult.error === 'undefined').to.be.true;
                                    (0, chai_1.expect)(actionResult.info.threadId).to.be.a('number');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should have an error in ActionResult but not throw, on BAD SQL query error', function () {
                    var _a;
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.query({ sql: 'BAD SQL' })];
                                case 1:
                                    actionResult = _b.sent();
                                    (0, chai_1.expect)(typeof actionResult.value === 'undefined').to.be.true;
                                    (0, chai_1.expect)(actionResult.error).to.not.be.undefined;
                                    (0, chai_1.expect)((_a = actionResult === null || actionResult === void 0 ? void 0 : actionResult.info) === null || _a === void 0 ? void 0 : _a.threadId).to.be.a('number');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 2:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('return an array on select should be altered by "after" param', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult, after;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [4 /*yield*/, req.query({ sql: 'SHOW TABLES' })];
                                case 2:
                                    actionResult = _a.sent();
                                    after = function (_) { return 'altered'; };
                                    (0, chai_1.expect)(after(actionResult.value)).to.be.equal('altered');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should be able to insert with special query format', function () {
                    var _a;
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, uniqueID, actionResult;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _b.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    uniqueID = (0, v4_1.default)().substring(0, 14);
                                    return [4 /*yield*/, req.query({
                                            sql: 'INSERT INTO BookRepeated (title, author) VALUES :books',
                                            values: {
                                                books: [
                                                    ['big lebowsky', uniqueID + '1'],
                                                    ['smal blosky', uniqueID + '2'],
                                                    ['random lebos', "'".concat(uniqueID, "'); SELECT * FROM Tag WHERE 1=1;")],
                                                ],
                                            },
                                        })];
                                case 2:
                                    actionResult = _b.sent();
                                    console.log(actionResult.error);
                                    (0, chai_1.expect)((_a = actionResult.value) === null || _a === void 0 ? void 0 : _a.insertId).to.be.a('number');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should be able to insert with special :? query format', function () {
                    var _a;
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, uniqueID, actionResult;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _b.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    uniqueID = (0, v4_1.default)().substring(0, 14);
                                    return [4 /*yield*/, req.query({
                                            sql: 'INSERT INTO BookRepeated (title, author) VALUES :?',
                                            values: [
                                                ['big lebowsky', uniqueID + '1'],
                                                ['smal blosky', uniqueID + '2'],
                                                ['random lebos', "'".concat(uniqueID, "'); SELECT * FROM Tag WHERE 1=1;")],
                                            ],
                                        })];
                                case 2:
                                    actionResult = _b.sent();
                                    console.log(actionResult.error);
                                    (0, chai_1.expect)((_a = actionResult.value) === null || _a === void 0 ? void 0 : _a.insertId).to.be.a('number');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should be able to select with special query format non nested array no parents', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [4 /*yield*/, req.query({
                                            sql: 'SELECT title FROM BookRepeated WHERE title IN :books',
                                            values: {
                                                books: ['big lebo;wsky', 'random lebos', "a'really'); SELECT * FROM Tag WHERE 1=1;"],
                                            },
                                        })];
                                case 2:
                                    actionResult = _a.sent();
                                    console.log(actionResult.error);
                                    (0, chai_1.expect)(actionResult.value).to.be.an('array');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should be able to select with sequential ? query format and 0 depth levels', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [4 /*yield*/, req.query({
                                            sql: 'SELECT title FROM BookRepeated WHERE title IN (:?, :?) OR title = :?',
                                            values: [
                                                'aspeci;al',
                                                'random lebos',
                                                "a'really'); SELECT * FROM Tag WHERE 1=1;"
                                            ],
                                        })];
                                case 2:
                                    actionResult = _a.sent();
                                    console.log(actionResult.error);
                                    (0, chai_1.expect)(actionResult.value).to.be.an('array');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('should be able to select with sequential ? query format and mixed depth 1 and 0', function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var config, req, actionResult;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    config = __assign({ multipleStatements: false }, MysqlReq_1.default.extractConfigFromEnv(process.env));
                                    req = new MysqlReq_1.default({
                                        adapter: mysql_1.default,
                                        logger: saylo_1.logger,
                                        connectionConfig: config
                                    });
                                    return [4 /*yield*/, req.removeConnection()];
                                case 1:
                                    _a.sent();
                                    (0, chai_1.expect)(req.hasConnection()).to.be.equal(false);
                                    return [4 /*yield*/, req.query({
                                            sql: 'SELECT title FROM BookRepeated WHERE title IN :? OR title = :?',
                                            values: [
                                                [
                                                    'random lebos',
                                                    'asuperreallyspec',
                                                ],
                                                "a'really'); SELECT * FROM Tag WHERE 1=1;",
                                            ],
                                        })];
                                case 2:
                                    actionResult = _a.sent();
                                    (0, chai_1.expect)(actionResult.value).to.be.an('array');
                                    return [4 /*yield*/, req.removeConnection()];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                return [2 /*return*/];
            });
        });
    });
});
