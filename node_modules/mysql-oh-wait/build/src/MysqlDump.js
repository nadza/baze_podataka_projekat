"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var MysqlDump = /** @class */ (function () {
    function MysqlDump() {
        this.logger = { log: function () { return undefined; }, debug: function () { return undefined; } };
        this.requestor = null;
        this.readFileSync = null;
        this.existsSync = null;
    }
    MysqlDump.prototype.inject = function (_a) {
        var requestor = _a.requestor, logger = _a.logger, readFileSync = _a.readFileSync, existsSync = _a.existsSync;
        logger && this.setLogger(logger);
        requestor && this.setRequestor(requestor);
        this.readFileSync = readFileSync || null;
        this.existsSync = existsSync || null;
    };
    MysqlDump.prototype.setRequestor = function (req) {
        this.requestor = req;
    };
    MysqlDump.prototype.getRequestor = function () {
        if (!this.requestor) {
            throw new Error('Must set Requestor first');
        }
        return this.requestor;
    };
    MysqlDump.prototype.setLogger = function (logger) {
        this.logger = logger;
    };
    MysqlDump.prototype.getLogger = function () {
        if (null === this.logger) {
            throw new Error('You must set the logger first');
        }
        return this.logger;
    };
    MysqlDump.prototype.executeSqlFileOnExistingConnection = function (_a) {
        var filePath = _a.filePath, disconnectOnFinish = _a.disconnectOnFinish;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.existsSync || !this.readFileSync) {
                            throw new Error('Need to pass existsSync, and readFileSync to MysqlDum.inject');
                        }
                        if (!this.existsSync(filePath)) {
                            throw new Error('File path does not exists ');
                        }
                        this.getLogger().log('executeSchemaOntoExistingConnection');
                        return [4 /*yield*/, this.getRequestor().query({
                                sql: this.readFileSync(filePath, 'utf-8'),
                            })];
                    case 1:
                        _b.sent();
                        if (!disconnectOnFinish) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getRequestor().disconnect()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    MysqlDump.prototype.executeSqlFile = function (_a) {
        var filePath = _a.filePath, connectionConfig = _a.connectionConfig, disconnectOnFinish = _a.disconnectOnFinish;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.logger) {
                            throw new Error('Must set logger before calling MysqlDump.executeSqlFile');
                        }
                        this.logger.log("MysqlDump:executeSqlFile(".concat(filePath, ")"));
                        if (!connectionConfig) {
                            connectionConfig = process.env
                                ? _1.MysqlReq.extractConfigFromEnv(process.env)
                                : {};
                        }
                        this.getRequestor().setConnectionConfig(__assign(__assign({}, connectionConfig), { multipleStatements: true }));
                        return [4 /*yield*/, this.executeSqlFileOnExistingConnection({
                                filePath: filePath,
                                disconnectOnFinish: disconnectOnFinish === undefined
                                    ? true
                                    : disconnectOnFinish
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return MysqlDump;
}());
exports.default = MysqlDump;
