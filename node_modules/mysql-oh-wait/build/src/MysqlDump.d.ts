/// <reference types="node" />
import { readFileSync, existsSync } from "fs";
import { LoggerInterface } from "./MysqlReq";
import { MysqlReq } from ".";
import { ConnectionConfig } from "mysql";
export type InjectProps = {
    requestor?: MysqlReq;
    logger?: LoggerInterface;
    readFileSync?: typeof readFileSync;
    existsSync?: typeof existsSync;
};
export interface ExecuteSqlFileOptProps {
    filePath: string;
    disconnectOnFinish?: boolean;
    connectionConfig?: ConnectionConfig;
}
declare class MysqlDump {
    private logger;
    private requestor;
    private readFileSync;
    private existsSync;
    inject({ requestor, logger, readFileSync, existsSync }: InjectProps): void;
    setRequestor(req: MysqlReq): void;
    getRequestor(): MysqlReq | never;
    setLogger(logger: LoggerInterface): void;
    getLogger(): LoggerInterface | never;
    executeSqlFileOnExistingConnection({ filePath, disconnectOnFinish }: ExecuteSqlFileOptProps): Promise<void>;
    executeSqlFile({ filePath, connectionConfig, disconnectOnFinish }: ExecuteSqlFileOptProps): Promise<void>;
}
export default MysqlDump;
//# sourceMappingURL=MysqlDump.d.ts.map