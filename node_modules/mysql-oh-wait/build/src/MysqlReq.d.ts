import { ConnectionConfig, Connection, MysqlError, QueryOptions } from 'mysql';
import { ActionResult } from './ActionResult';
import OhWaitError from './OhWaitError';
import { Values } from './QueryFormat';
export interface ReqQueryOptions<RawType, TransformedType = RawType> extends QueryOptions {
    after?: (p: RawType) => TransformedType;
}
export type ExecutorParam = <S extends (value?: any) => any, T extends (reason?: any) => any>(resolve: S, reject: T) => void;
export type RequiredConfigProps = {
    host: string;
    user: string;
    password: string;
    database: string;
};
export type UserProvidedEnvVarNames = {
    host: string;
    user: string;
    password: string;
    database: string;
    charset?: string;
    collation?: string;
    multipleStatements?: boolean;
};
export type ConfigPropsOptional = {
    host?: string;
    user?: string;
    password?: string;
    database?: string;
    charset?: string;
    collation?: string;
    multipleStatements?: boolean;
};
export type RequestorEnvVarNames = {
    host: 'DB_HOST';
    user: 'DB_USER';
    password: 'DB_PASSWORD';
    database: 'DB_NAME';
    charset: 'DB_CHARSET';
    collation: 'DB_COLLATION';
    multipleStatements: 'MULTIPLE_STATEMENTS';
};
export type ConnectionConfigOptions = {
    host: string | null;
    user: string | null;
    password: string | null;
    database: string | null;
    charset: string | null;
    collation: string | null;
};
export type ConnectionInfo = {
    threadId: number | null;
    connection: Connection | null;
    config: ConnectionConfig;
};
export declare type LoggerInterface = {
    debug: (...params: any[]) => void;
    log: (...params: any[]) => void;
};
export declare interface MysqlReqConstructor {
    new (config: ConnectionConfigOptions): MysqlReq;
    getDefaultEnvVarNames: () => RequestorEnvVarNames;
    extractConfigFromEnv: (env: Object, envVarNames: RequestorEnvVarNames) => ConnectionConfigOptions;
    isMissingConfigProps: (config: ConnectionConfigOptions) => boolean;
}
export declare interface AdapterInterface {
    createConnection: (config: ConnectionConfig) => Connection;
}
export type MysqlReqConfig = {
    adapter?: AdapterInterface;
    logger?: LoggerInterface;
    connectionConfig?: ConnectionConfig;
};
export type MysqlReqInjectProps = {
    adapter?: AdapterInterface;
    logger?: LoggerInterface;
    env?: any;
    envVarNames?: UserProvidedEnvVarNames;
};
export default class MysqlReq {
    logger: LoggerInterface;
    adapter: AdapterInterface | null;
    connectionConfig: ConnectionConfig;
    mysqlConnection: Connection | null;
    lockedStatePromise: Promise<any> | null;
    lockedStateId: string | null;
    constructor(config?: MysqlReqConfig);
    inject({ adapter, logger, env, envVarNames }: MysqlReqInjectProps): void;
    getActionResult<T>(props: {
        value: T;
        error?: MysqlError | OhWaitError;
    } | {
        value?: T;
        error: MysqlError | OhWaitError;
    }): ActionResult<T>;
    setAdapter(mysqlAdapter: AdapterInterface): void;
    getAdapter(): AdapterInterface;
    setLogger(logger: LoggerInterface): void;
    getLogger(): LoggerInterface;
    setConnectionConfig(config: ConnectionConfig): ConnectionConfig | never;
    getConnectionConfig(): ConnectionConfig;
    createConnection(): void | never;
    attachQueryFormat(queryFormat?: {
        queryFormat: (query: string, values: Values) => string;
    }): void;
    hasConnection(): boolean;
    getConnection(): Connection | never;
    removeConnection(): Promise<boolean>;
    getThreadId(): number | null;
    isConnected(): Promise<boolean>;
    connect(): Promise<ActionResult<number | null>>;
    disconnect(): Promise<import("./ActionResult").ActionResultSuccess<{
        didDisconnect: boolean;
    }> | import("./ActionResult").ActionResultError<{
        didDisconnect: boolean;
    }>>;
    /**
     * Do not manually set the second param type InferredTransformedType,
     * it is inferred from the after callback when provided
     * @param param0
     * @returns
     */
    query<RawReturnType, InferredTransformedType = RawReturnType>({ sql, values, after }: ReqQueryOptions<RawReturnType, InferredTransformedType>): Promise<ActionResult<InferredTransformedType>>;
    getConnectionInfo(): ConnectionInfo;
    awaitLockStatePromises(from: string): Promise<void>;
    waitForLocks(identifier: string, executor: ExecutorParam): Promise<unknown>;
    lockUnlock(identifier: string, executor: ExecutorParam): Promise<any>;
    unlock(): void;
    isLocked(): boolean;
    static getDefaultEnvVarNames(): RequestorEnvVarNames;
    static extractConfigFromEnv(env: any, envVarNames?: UserProvidedEnvVarNames): ConfigPropsOptional;
    static isMissingConfigProps(config: ConfigPropsOptional): boolean;
}
//# sourceMappingURL=MysqlReq.d.ts.map