import { Connection } from "mysql";
type Escape = Connection["escape"];
type ObjOf<T> = {
    [k: string]: T;
};
type Stringable = string | boolean | number | Date | null;
type StringableObject = ObjOf<Stringable> | ObjOf<Stringable[]> | ObjOf<Stringable[][]>;
type StringableMixedObject = ObjOf<Stringable | Stringable[] | Stringable[][]>;
export type Values = StringableMixedObject | StringableObject | Stringable[] | Stringable[][];
export default class QueryFormat {
    escape: Escape;
    matchesCount: number | null;
    values: Values | null;
    copyOfValuesWhenArray: Stringable[] | Stringable[][] | null;
    constructor(connection: Connection);
    mapEscape(val: Stringable, depth: number, ref?: string): string;
    mapEscape(val: Stringable[], depth: number, ref?: string): string[];
    mapEscape(val: Stringable[][], depth: number, ref?: string): string[][];
    static toMysqlDatetime(d: Date): string;
    joinUseParenthesis(escapedValues: string): string;
    joinUseParenthesis(escapedValues: string[]): string;
    joinUseParenthesis(escapedValues: string[][]): string;
    queryFormat(query: string, values?: Values): string;
    replacer(ref: string, key: string): string;
}
export {};
//# sourceMappingURL=QueryFormat.d.ts.map