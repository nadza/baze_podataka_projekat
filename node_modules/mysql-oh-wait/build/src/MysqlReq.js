"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var OhWaitError_1 = __importDefault(require("./OhWaitError"));
var QueryFormat_1 = __importDefault(require("./QueryFormat"));
var MysqlReq = /** @class */ (function () {
    function MysqlReq(config) {
        var _a = config || {}, adapter = _a.adapter, logger = _a.logger, connectionConfig = _a.connectionConfig;
        this.mysqlConnection = null;
        this.lockedStatePromise = null;
        this.lockedStateId = null;
        this.connectionConfig = {};
        this.adapter = null;
        this.logger = { log: function () { return undefined; }, debug: function () { return undefined; }, };
        logger && this.setLogger(logger);
        adapter && this.setAdapter(adapter);
        connectionConfig && this.setConnectionConfig(connectionConfig);
    }
    MysqlReq.prototype.inject = function (_a) {
        var adapter = _a.adapter, logger = _a.logger, env = _a.env, envVarNames = _a.envVarNames;
        adapter && this.setAdapter(adapter);
        logger && this.setLogger(logger);
        var config;
        if (envVarNames) {
            config = env && MysqlReq.extractConfigFromEnv(env, envVarNames);
        }
        else {
            config = env && MysqlReq.extractConfigFromEnv(env);
        }
        if (config) {
            this.setConnectionConfig(config);
        }
    };
    MysqlReq.prototype.getActionResult = function (props) {
        return __assign(__assign({}, props), { info: this.getConnectionInfo() });
    };
    MysqlReq.prototype.setAdapter = function (mysqlAdapter) {
        this.adapter = mysqlAdapter;
    };
    MysqlReq.prototype.getAdapter = function () {
        if (null === this.adapter) {
            throw new Error('You must set the adapter first');
        }
        return this.adapter;
    };
    MysqlReq.prototype.setLogger = function (logger) {
        this.logger = logger;
    };
    MysqlReq.prototype.getLogger = function () {
        if (null === this.logger) {
            throw new Error('You must set the logger first');
        }
        return this.logger;
    };
    MysqlReq.prototype.setConnectionConfig = function (config) {
        if (this.hasConnection()) {
            throw new Error('Cannot change connection config while there is a connection, call an awating removeConnection() first.');
        }
        if (MysqlReq.isMissingConfigProps(config)) {
            console.log(config);
            throw new Error('Missing database connection config props');
        }
        this.connectionConfig = config;
        return this.connectionConfig;
    };
    MysqlReq.prototype.getConnectionConfig = function () {
        return this.connectionConfig;
    };
    MysqlReq.prototype.createConnection = function () {
        if (null !== this.mysqlConnection) {
            throw new Error('Cannot create another connection');
        }
        var config = this.getConnectionConfig();
        if (MysqlReq.isMissingConfigProps(config)) {
            throw new Error('Must set full connection config before attempting to connect');
        }
        this.mysqlConnection = this.getAdapter().createConnection(config);
        this.attachQueryFormat();
        this.getLogger().debug(this.getThreadId(), 'this.createConnection(), Connection created', this.mysqlConnection);
    };
    MysqlReq.prototype.attachQueryFormat = function (queryFormat) {
        if (!this.hasConnection()) {
            throw new Error('Must createConnection first');
        }
        if (!this.mysqlConnection) {
            throw new Error('Connection must be provided for QueryFormat to be attached');
        }
        if (!queryFormat) {
            queryFormat = new QueryFormat_1.default(this.mysqlConnection);
        }
        this.mysqlConnection.config.queryFormat = function (query, values) {
            return queryFormat.queryFormat(query, values);
        };
    };
    MysqlReq.prototype.hasConnection = function () {
        return this.mysqlConnection !== null;
    };
    MysqlReq.prototype.getConnection = function () {
        if (this.mysqlConnection === null) {
            throw new Error('You must create a connection first');
        }
        return this.mysqlConnection;
    };
    MysqlReq.prototype.removeConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            var didRemove;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        didRemove = false;
                        if (!this.mysqlConnection) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.disconnect()];
                    case 1:
                        _a.sent();
                        this.mysqlConnection = null;
                        this.getLogger().debug(this.getThreadId(), 'this.removeConnection(), Connection removed', this.mysqlConnection);
                        didRemove = true;
                        _a.label = 2;
                    case 2: return [2 /*return*/, didRemove];
                }
            });
        });
    };
    MysqlReq.prototype.getThreadId = function () {
        return (this.hasConnection() && this.getConnection().threadId) || null;
    };
    MysqlReq.prototype.isConnected = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.hasConnection()) return [3 /*break*/, 1];
                        return [2 /*return*/, false];
                    case 1:
                        if (!(null === this.getThreadId())) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.awaitLockStatePromises("isConnected()")];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, this.hasConnection() && Number.isInteger(this.getThreadId())];
                }
            });
        });
    };
    MysqlReq.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isConnected()];
                    case 1:
                        if (!!(_a.sent())) return [3 /*break*/, 5];
                        if (!this.hasConnection()) {
                            this.getLogger().debug(this.getThreadId(), 'this:connect(), No connection');
                            this.createConnection();
                        }
                        this.getLogger().debug(this.getThreadId(), 'this:connect(), Connecting...');
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        this.getLogger().debug(this.getThreadId(), 'this:connect(), locking');
                        return [4 /*yield*/, this.lockUnlock('::connect()', function (resolve, reject) {
                                _this.getConnection().connect(function (err) { return ((err && reject(err)) || resolve(true)); });
                            })];
                    case 3:
                        _a.sent();
                        this.getLogger().debug(this.getThreadId(), "this:connect(), Connected to database, threadId: ".concat(this.getThreadId()));
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        this.getLogger().debug(this.getThreadId(), 'this:connect(), trouble connecting threw: ', err_1);
                        return [2 /*return*/, this.getActionResult({ error: err_1 })];
                    case 5: return [2 /*return*/, this.getActionResult({ value: this.getThreadId() })];
                }
            });
        });
    };
    MysqlReq.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var err_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.isConnected()];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 5];
                        this.getLogger().debug(this.getThreadId(), 'this:disconnect(), isConnected: true', this.getThreadId());
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        this.getLogger().debug(this.getThreadId(), 'this:disconnect(), locking');
                        return [4 /*yield*/, this.lockUnlock('::disconnect()', function (resolve, reject) {
                                _this.getConnection().end(function (err) { return ((err && reject(err)) || resolve(true)); });
                            })];
                    case 3:
                        _a.sent();
                        this.mysqlConnection = null;
                        return [2 /*return*/, this.getActionResult({ value: { didDisconnect: true } })];
                    case 4:
                        err_2 = _a.sent();
                        this.getLogger().debug(this.getThreadId(), 'this:disconnect(), difficulties disconnecting', err_2);
                        return [2 /*return*/, this.getActionResult({ error: err_2, })];
                    case 5: return [4 /*yield*/, this.isConnected()];
                    case 6:
                        if (_a.sent()) {
                            return [2 /*return*/, this.getActionResult({ error: new OhWaitError_1.default('Weird error, still connected after disconnect attempt'), })];
                        }
                        return [2 /*return*/, this.getActionResult({ value: { didDisconnect: false } })];
                }
            });
        });
    };
    /**
     * Do not manually set the second param type InferredTransformedType,
     * it is inferred from the after callback when provided
     * @param param0
     * @returns
     */
    MysqlReq.prototype.query = function (_a) {
        var sql = _a.sql, values = _a.values, after = _a.after;
        return __awaiter(this, void 0, void 0, function () {
            var connectResult, connection_1, result, err_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 6]);
                        return [4 /*yield*/, this.isConnected()];
                    case 1:
                        if (!!(_b.sent())) return [3 /*break*/, 3];
                        this.getLogger().debug(this.getThreadId(), 'this.query() You did not connect manually, attempting automatic connection');
                        return [4 /*yield*/, this.connect()];
                    case 2:
                        connectResult = _b.sent();
                        if (connectResult.error) {
                            this.getLogger().debug(this.getThreadId(), 'this.query() Automatic connection attempt failed, cannot continue with query');
                            throw connectResult.error;
                        }
                        _b.label = 3;
                    case 3:
                        connection_1 = this.getConnection();
                        return [4 /*yield*/, this.waitForLocks('::query():' + sql, function (resolve, reject) {
                                var cb = function (err, result) { return err ? reject(err) : resolve(result); };
                                values ? connection_1.query(sql, values, cb) : connection_1.query(sql, cb);
                            })];
                    case 4:
                        result = _b.sent();
                        if (typeof after !== 'undefined') {
                            return [2 /*return*/, this.getActionResult({ value: after(result) })];
                        }
                        return [2 /*return*/, this.getActionResult({ value: result })];
                    case 5:
                        err_3 = _b.sent();
                        this.getLogger().debug(this.getThreadId(), 'this.query() failed', err_3);
                        return [2 /*return*/, this.getActionResult({ error: err_3 })];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    MysqlReq.prototype.getConnectionInfo = function () {
        return {
            threadId: this.getThreadId(),
            connection: (this.hasConnection() && this.getConnection()) || null,
            config: this.getConnectionConfig(),
        };
    };
    MysqlReq.prototype.awaitLockStatePromises = function (from) {
        return __awaiter(this, void 0, void 0, function () {
            var err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isLocked()) {
                            this.getLogger().debug(this.getThreadId(), "this:awaitLockStatePromises(".concat(from, "), not locked"));
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.getLogger().debug(this.getThreadId(), "this:awaitLockStatePromises(".concat(from, "), start for: "), this.lockedStateId);
                        return [4 /*yield*/, this.lockedStatePromise];
                    case 2:
                        _a.sent();
                        this.getLogger().debug(this.getThreadId(), "this:awaitLockStatePromises(".concat(from, "), finished waiting this.lockedStatePromise"));
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        this.getLogger().debug(this.getThreadId(), "this:awaitLockStatePromises(".concat(from, "), error"), err_4);
                        return [3 /*break*/, 4];
                    case 4:
                        try {
                            this.getLogger().debug(this.getThreadId(), "this:awaitLockStatePromises(".concat(from, "), unlocking, for :"), this.lockedStateId);
                            this.unlock();
                        }
                        catch (err) {
                            this.getLogger().debug(this.getThreadId(), "this:awaitLockStatePromises(".concat(from, "), unlocking error"), err);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MysqlReq.prototype.waitForLocks = function (identifier, executor) {
        return __awaiter(this, void 0, void 0, function () {
            var p, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.awaitLockStatePromises("lockUnlock(".concat(identifier, ")"))];
                    case 1:
                        _a.sent();
                        if (this.isLocked()) {
                            throw new Error('this:lockUnlock() weird state, should not be locked');
                        }
                        p = new Promise(executor);
                        this.getLogger().debug(this.getThreadId(), 'this:waitForLocks(), will create non lock promise:', p);
                        return [4 /*yield*/, p];
                    case 2:
                        res = _a.sent();
                        this.getLogger().debug(this.getThreadId(), 'this:waitForLocks(), stopped awaiting non lock promise:', p);
                        return [2 /*return*/, res];
                }
            });
        });
    };
    MysqlReq.prototype.lockUnlock = function (identifier, executor) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.awaitLockStatePromises("lockUnlock(".concat(identifier, ")"))];
                    case 1:
                        _a.sent();
                        if (this.isLocked()) {
                            throw new Error('this:lockUnlock() weird state, should not be locked');
                        }
                        this.lockedStateId = identifier;
                        this.getLogger().debug(this.getThreadId(), 'this:lockUnlock(), creating lockedStatePromise for:', this.lockedStateId);
                        this.lockedStatePromise = new Promise(executor);
                        this.getLogger().debug(this.getThreadId(), 'this:lockUnlock(), this.lockedStatePromise:', this.lockedStatePromise);
                        return [4 /*yield*/, this.lockedStatePromise];
                    case 2:
                        res = _a.sent();
                        this.unlock();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    MysqlReq.prototype.unlock = function () {
        this.getLogger().debug(this.getThreadId(), 'this:unlock(), for:', this.lockedStateId);
        this.lockedStateId = null;
        this.lockedStatePromise = null;
        this.getLogger().debug(this.getThreadId(), 'this:unlock(), this.lockedStatePromise:', this.lockedStatePromise);
    };
    MysqlReq.prototype.isLocked = function () {
        if (this.lockedStatePromise !== null) {
            this.getLogger().debug(this.getThreadId(), 'this:isLocked(), with :', this.lockedStateId);
            return true;
        }
        else {
            return false;
        }
    };
    MysqlReq.getDefaultEnvVarNames = function () {
        return {
            host: 'DB_HOST',
            user: 'DB_USER',
            password: 'DB_PASSWORD',
            database: 'DB_NAME',
            charset: 'DB_CHARSET',
            collation: 'DB_COLLATION',
            multipleStatements: 'MULTIPLE_STATEMENTS',
        };
    };
    MysqlReq.extractConfigFromEnv = function (env, envVarNames) {
        var envVNames = envVarNames || MysqlReq.getDefaultEnvVarNames();
        var convertToBoolean = { multipleStatements: true };
        var config = Object.keys(envVNames).reduce(function (res, mysqljsConfKey, i) {
            var _a;
            var envVarName = envVNames[mysqljsConfKey];
            return (envVarName && env[envVarName] !== undefined)
                ? __assign(__assign({}, res), (_a = {}, _a[mysqljsConfKey] = convertToBoolean.hasOwnProperty(mysqljsConfKey)
                    ? !(env[envVarName] === 'false' || env[envVarName] === '0')
                    : env[envVarName], _a)) : __assign({}, res);
        }, {});
        return config;
    };
    MysqlReq.isMissingConfigProps = function (config) {
        var requiredProps = ['host', 'user', 'password', 'database'];
        var missingProps = requiredProps.filter(function (prop) { return !config.hasOwnProperty(prop); });
        return missingProps.length > 0;
    };
    return MysqlReq;
}());
exports.default = MysqlReq;
// TODO Desired usage
// (async function () {
// const a = new MysqlReq();
//   // const r1: Promise<ActionResult<number>>
//   const r1 = a.query<{ a: string, b: string }[]>({
//     sql: `
//     // some sql query returning rows of a, b
//     `,
//     values: { userUUID: '' },
//     after: (res: { a: string, b: string }[]) => {
//       return 21;
//     },
//   });
//   // const r2: ActionResult<{
//   //   a: string;
//   //   b: string;
//   // }[]>
//   const r2 = await a.query<{ a: string, b: string }[]>({
//     sql: `
//     // some sql query returning rows of a, b
//     `,
//     values: { userUUID: '' },
//   });
// })
